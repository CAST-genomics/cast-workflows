version 1.0

workflow run_advntr {

    input {
        Array[String] bam_files
        String region
        String google_project
        String gcloud_token
    }

    scatter (i in range(length(bam_files))) {
        String bam_file = bam_files[i]

        call download_input {
            input :
                bam_file = bam_file,
                region = region,
                google_project = google_project,
                gcloud_token = gcloud_token,
        }
    
        call genotype {
            input :
                target_bam_file = download_input.target_bam_file,
                target_bam_index_file = download_input.target_bam_index_file,
        }
    }
    output {
        #File target_bam_file = download_input.target_bam_file
        #File target_bam_index_file = download_input.target_bam_index_file

        #Array[File?] log_file = genotype.log_file
        #Array[File?] filtering_out_file = genotype.filtering_out_file
        #Array[File?] keywords_file = genotype.keywords_file
        #Array[File?] unmapped_file = genotype.unmapped_file
        Array[File] genotype_output = genotype.genotype_output
    }

    meta {
        description: "This workflow calls adVNTR to genotype VNTRs"
    }
}

task download_input {
    input {
        String bam_file
        String region
        String google_project
        String gcloud_token
    }

    # Names of all the intermediate files generated to get the target bam file.
    String unsorted_target_bam = "target_region_~{sample_id}_unsorted.bam"
    String sorted_target_bam = "target_~{sample_id}.bam"
    String sorted_target_bam_index = "target_~{sample_id}.bam.bai"
    String sample_id = sub(basename(bam_file), ".bam", "")

    command <<<
        ls -lh .
        export HTSLIB_CONFIGURE_OPTIONS="--enable-gcs"
        export GCS_OAUTH_TOKEN="~{gcloud_token}"
        export GCS_REQUESTER_PAYS_PROJECT="~{google_project}"
        samtools view -hb -o ~{unsorted_target_bam} --use-index ~{bam_file} ~{region}
        samtools sort -o ~{sorted_target_bam} ~{unsorted_target_bam}
        samtools index ~{sorted_target_bam}
        rm ~{unsorted_target_bam}
        ls -lh .
    >>>

    runtime {
        docker:"sarajava/samtools:1.13"
        cpu: "4"
        memory: "18G"
    }
    output {
        #File? unsorted_target_bam_file = "~{unsorted_target_bam}"
        File target_bam_file = "~{sorted_target_bam}"
        File target_bam_index_file = "~{sorted_target_bam_index}"
    }
}

task genotype {
    input {
        File target_bam_file
        File target_bam_index_file
    }

    # Provide the names of all the output files being generated by AdVNTR including intermediate files.
    String logging = "./log_~{sample_id}.bam.log"
    String filtering_out = "./filtering_out_~{sample_id}.unmapped.fasta.txt"
    String keywords = "./keywords_~{sample_id}.unmapped.fasta.txt"
    String unmapped = "./~{sample_id}.unmapped.fasta"
    String genotype_output = "./~{sample_id}.vcf"
    String sample_id = sub(basename(target_bam_file), ".bam", "")


    # VNTR_db is placed in the docker file. So the path is within the docker image.
    String vntr_db = "/adVNTR/vntr_db/hg38_VNTRs_by_TRF.db"


    # Set VNTR ids for genotyping based on input.
    # Two options right now: VNTR in the ACAN gene or the list of 52 phenotype associated VNTRs.
    #String vids = "$(cat /adVNTR/vntr_db/phenotype_associated_vntrs_comma.txt)"
    String vids = "290964"

    command <<<
        ls -lh .
        echo "~{target_bam_file}"
        echo "num reads $(samtools view -c ~{target_bam_file})"
        echo "num reads in region $(samtools view -c ~{target_bam_file} chr15:88855424-88857434) "
        /usr/bin/time -v advntr genotype  \
        --alignment_file ~{target_bam_file} \
        --models ~{vntr_db}  \
        --working_directory . \
        -vid ~{vids} \
        --outfmt vcf \
        --log_pacbio_reads \
        --pacbio > ~{genotype_output}
        cat ~{keywords}
        cat ~{filtering_out}
        ls -lh .
    >>>
    #    rm ~{target_bam_file}
    #    rm ~{filtering_out} ~{keywords} ~{unmapped} 

    runtime {
        docker:"sarajava/advntr:1.5.0_db_v3"
        cpu: "4"
        memory: "18G"
    }

    output {
        File? log_file = "~{logging}"
        File? filtering_out = "~{filtering_out}"
        File? keywords = "~{keywords}"
        File genotype_output = "~{genotype_output}"
    }
}
